//
//  AylaSDK
//
//  Copyright Â© 2015 Ayla Networks. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "AylaLog.h"

/**
 * SDK logging levels
 */
typedef NS_ENUM(uint16_t, AylaSystemLoggingLevel) {

    /** Disable logging completely */
    AylaSystemLoggingNone = 0x00,

    /** Only log Error level messages */
    AylaSystemLoggingError = 0x01,

    /** Log Warning and Error level messages */
    AylaSystemLoggingWarning = 0x03,

    /** Log Info, Warning, Error level messages */
    AylaSystemLoggingInfo = 0x07,

    /** Log Debug, Info, Warning, and Error level messages */
    AylaSystemLoggingDebug = 0x0f,

    /** Log Verbose, Debug, Info, Warning, and Error level messages */
    AylaSystemLoggingVerbose = 0x1f,

    /** Log all messages, of any level */
    AylaSystemLoggingAll = 0xff,
};

/** Destinations for `AylaLogMessage` output */
typedef NS_OPTIONS(uint8_t, AylaSystemLoggingOutput) {

    /** Option to print log messages in console */
    AylaSystemLoggingOutputConsole = 1 << 0,

    /** Option to write log messages into log files */
    AylaSystemLoggingOutputLogFile = 1 << 1,

    /** Option to also send log messages to custom, registered, application-level loggers */
    AylaSystemLoggingOutputAppLoggers = 1 << 3
};

#define AylaLogI(tg, flg, fmrt, ...) \
    [[AylaLogManager sharedManager] log:tg level:AylaLogMessageLevelInfo flag:flg time:nil fmt:fmrt, ##__VA_ARGS__]
#define AylaLogW(tg, flg, fmrt, ...) \
    [[AylaLogManager sharedManager] log:tg level:AylaLogMessageLevelWarning flag:flg time:nil fmt:fmrt, ##__VA_ARGS__]
#define AylaLogE(tg, flg, fmrt, ...) \
    [[AylaLogManager sharedManager] log:tg level:AylaLogMessageLevelError flag:flg time:nil fmt:fmrt, ##__VA_ARGS__]
#define AylaLogD(tg, flg, fmrt, ...) \
    [[AylaLogManager sharedManager] log:tg level:AylaLogMessageLevelDebug flag:flg time:nil fmt:fmrt, ##__VA_ARGS__]
#define AylaLogV(tg, flg, fmrt, ...) \
    [[AylaLogManager sharedManager] log:tg level:AylaLogMessageLevelVerbose flag:flg time:nil fmt:fmrt, ##__VA_ARGS__]
#define AylaLog(tg, lev, flg, tm, fmt, ...) \
    [[AylaLogManager sharedManager] log:tg level:lev flag:flg time:tm fmt:fmrt, ##__VA_ARGS__]

NS_ASSUME_NONNULL_BEGIN

@class AylaLogMessage;

/**
 * `AylaLogManager` coordinates the logging functionality within the SDK.
 * By default, log messages generated by the SDK will be sent to both log files and console.
 *
 * `AylaLogManager` also provides a method to allow an application to add its own logs into the SDK's logging mechanism. 
 * Applications may also generate their own loggers and register them to `AylaLogManager`. After registering, if 
 * `AylaSystemLoggingOutputAppLoggers` has also been enabled, log messages will also be passed to any application specific
 * loggers. An easily recognizeable tag is highly recommanded for custom application-level logs, so that they can be easily 
 * distinguished from the in-built SDK messages.
 */
@interface AylaLogManager : NSObject

/** @name Log Manager Properties */

/** Current logging level. By default, this is set as AylaSystemLoggingError */
@property (nonatomic, readwrite) AylaSystemLoggingLevel loggingLevel;

/** Current enabled logging outputs. By default, this is set as
 * (`AylaSystemLoggingOutputConsole|AylaSystemLoggingOutputLogFile`) */
@property (nonatomic, readwrite) AylaSystemLoggingOutput loggingOutputs;

/**
 * Shared `AylaLogManager` instance
 */
+ (instancetype)sharedManager;

/** @name Logger Handling Methods */

/**
 * An `NSArray` of any custom application-level loggers.
 *
 * @return An `NSArray` of exisiting custom loggers.
 * @sa AylaLoggerProtocol
 */
- (NSArray *)loggers;

/**
 * Use this method to register custom loggers to `AylaLogManager`.
 *
 * @param logger The logger (an object conforming to `AylaLoggerProtocol` protocol, which is to be registered to the SDK.
 * @param key A unique key for the given logger. If this key has been used for another logger, this request will replace the
 * previous logger with the new one.
 */
- (void)addLogger:(id<AylaLoggerProtocol>)logger withKey:(NSString *)key;

/**
 * Use this method to remove a logger from `AylaLogManager`.
 *
 * @param key The key of the logger that is to be removed.
 */
- (void)removeLoggerWithKey:(NSString *)key;

/**
 * Get the file path to the recorded log files. Return nil if no log file is found.
 */
- (nullable NSString *)getLogFilePath;

/** @name Initializer Methods */

/**
 * Use this method to create and log a new log message.
 * @sa AylaLoggerProtocol
 *
 * @param tag Tag of log message, targeting a specific logger instance.
 * @param level Logging level of the log message.
 * @param flag Flag of log message.
 * @param time Timestamp of log message. If this param is set to be nil, the SDK will use `[NSDate data]` to create a
 * timestamp for this message.
 * @param fmt Format string for the message contents.
 * @param ... The strings to be substituted into the format string `fmt`
 */
- (void)log:(NSString *)tag
      level:(AylaLogMessageLevel)level
       flag:(NSInteger)flag
       time:(NSDate *__nullable)time
        fmt:(NSString *)fmt, ... NS_FORMAT_FUNCTION(5, 6);
/**
 * Use this method to create and log a new log message. The method signature has been designed thinking on swift usability.
 * @sa AylaLoggerProtocol
 *
 *        // Error Log
 *        // Output: 2017-02-17 13:48:22.508 MyApp[28007:1080112] 2/17/17, 1:48 PM, E, MyLoginClassTag, Login Failed
 *        // Obj-C
 *        [[AylaLogManager sharedManager] log:@"MyLoginClassTag" level:AylaLogMessageLevelError flag:0 time:nil message:@"Login has Failed"];
 *
 *        // Swift
 *        AylaLogManager.shared().log("MyLoginClassTag", level:AylaLogMessageLevel.error, flag:0, time:nil, message: "Login has Failed")
 *
 *        // Debug log
 *        // Output: 2017-02-17 13:58:22.586 MyApp[28662:1089092] 2/17/17, 1:58 PM, E, MyLoginClassTag, User John Doe has logged in
 *        // Obj-C
 *        [[AylaLogManager sharedManager] log:@"MyLoginClassTag" level:AylaLogMessageLevelDebug flag:0 time:nil message:[NSString stringWithFormat:@"User %@ has logged in", user.name]];
 *
 *        // Swift
 *        AylaLogManager.shared().log("MyLoginClassTag", level:AylaLogMessageLevel.debug, flag:0, time:nil, message: "User \(user.name) has logged in")
 *
 *
 * @param tag Tag of log message, targeting a specific logger instance.
 * @param level Logging level of the log message.
 * @param flag Flag of log message.
 * @param time Timestamp of log message. If this param is set to be nil, the SDK will use `[NSDate data]` to create a
 * timestamp for this message.
 * @param message String for the message contents.
 */
- (void)log:(NSString *)tag level:(AylaLogMessageLevel)level flag:(NSInteger)flag time:(NSDate *__nullable)time message:(NSString *)message;
@end

NS_ASSUME_NONNULL_END
